{
	"nodes":[
		{"id":"74949353776156d5","type":"text","text":"**Box model** в CSS — это фундаментальная концепция, которая описывает, как браузеры вычисляют размеры и пространство вокруг HTML-элементов. Основное понимание box model важно для всех, кто занимается веб-разработкой, поскольку это помогает контролировать макет и дизайн сайта.","x":-307,"y":-180,"width":594,"height":110},
		{"id":"520270b0621734e0","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">Border / Граница</h2>\n\nОбрамляет padding и само содержимое. Граница является частью размера элемента и может иметь разную толщину, стиль и цвет.","x":-10,"y":0,"width":619,"height":195},
		{"id":"181efed551088e5e","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">Margin / Внешний отступ</h2>\n\nПространство вокруг элемента, включая его границу. Margin не влияет на внутренний размер элемента, но влияет на то, как элементы располагаются относительно друг друга на странице.","x":650,"y":0,"width":619,"height":195},
		{"id":"a88786956de2e2d3","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">Padding / Внутренний отступ</h2>\n\nПространство между содержимым элемента и его границей. Padding увеличивает размер элемента, но остаётся частью элемента, что значит фон элемента продолжается в области padding.","x":-670,"y":0,"width":619,"height":195},
		{"id":"bbb285ae443061f5","type":"text","text":"```css\n.box {\n  width: 100px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid black;\n  margin: 20px;\n  box-sizing: border-box;\n}\n```\nЭтот CSS создаст элемент, общий внешний размер которого составит 100x100 пикселей, включая все его внутренние отступы и границы, а также обеспечит внешний отступ в 20 пикселей вокруг элемента.","x":400,"y":727,"width":473,"height":345},
		{"id":"da4b7223183848e8","type":"text","text":"Когда вы стилизуете элемент в CSS, вы можете управлять каждым из этих аспектов с помощью соответствующих свойств CSS:\n- `width` и `height` устанавливают размеры области содержимого.\n- `padding` управляет размером внутреннего отступа. Можно задать отступ со всех сторон одновременно или управлять каждой стороной индивидуально с помощью `padding-top`, `padding-right`, `padding-bottom`, и `padding-left`.\n- `border` определяет стиль, ширину и цвет границы. Как и в случае с padding, можно настроить каждую сторону границы отдельно.\n- `margin` задает внешний отступ. Его также можно настроить для каждой стороны отдельно через `margin-top`, `margin-right`, `margin-bottom`, и `margin-left`.","x":-333,"y":320,"width":620,"height":349},
		{"id":"2bbf1c203e957c03","type":"text","text":"<h2 style=\"color: #7EA1FF; text-align: center\">Box sizing</h2>\n\nПо умолчанию, если вы установите значения `width` и `height` для элемента, браузер рассчитает общий размер элемента, добавляя к указанным размерам padding и border. Это может сделать сложным точное управление размерами элемента, особенно если вы не знаете точной толщины границ и размеров отступов.\n\nСвойство `box-sizing` позволяет изменить стандартное поведение:\n\n- `content-box`: размер элемента определяется только через `width` и `height`, исключая padding и border. Это значение по умолчанию.\n- `border-box`: размер элемента включает `width` и `height` плюс любой border и padding, что упрощает управление размером элемента.","x":-333,"y":720,"width":619,"height":358},
		{"id":"d1cfa86f70fc61f2","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">Box Model</h1>","x":-139,"y":-320,"width":233,"height":44},
		{"id":"13a9483239034376","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">Content / Содержимое</h2>\n\nЭто область, где отображается содержимое элемента, например текст или изображение.","x":-1329,"y":0,"width":619,"height":195},
		{"id":"2d51712df38d9759","type":"text","text":"Свойство **background** в CSS позволяет устанавливать фоновые изображения или цвета для HTML-элементов, что значительно улучшает визуальное представление веб-страниц. Это свойство является сокращённой записью для нескольких других свойств, которые управляют различными аспектами фона элемента.","x":-348,"y":1500,"width":651,"height":110},
		{"id":"41b2065660642182","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-repeat</h2>\n\n- Определяет, как фоновое изображение должно повторяться.\n- Может принимать значения `repeat` (повторяется в обеих направлениях), `repeat-x` (повторяется по горизонтали), `repeat-y` (повторяется по вертикали), и `no-repeat` (не повторяется).","x":-1368,"y":1720,"width":619,"height":227},
		{"id":"37000c66adade2cf","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-position</h2>\n\n- Задаёт начальное положение фонового изображения.\n- Принимает значения в виде ключевых слов (`top`, `bottom`, `left`, `right`, `center`) или координат (`50% 50%`, `10px 20px`).","x":-711,"y":1720,"width":619,"height":227},
		{"id":"76c7313c13eedce8","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-size</h2>\n\n- Контролирует размер фонового изображения.\n- Может быть задано в абсолютных значениях (например, `100px 200px`), относительных (`50% 30%`), или с использованием ключевых слов `cover` (изображение масштабируется, чтобы полностью покрыть фоновую область) и `contain` (изображение масштабируется, чтобы полностью поместиться в фоновую область).","x":-51,"y":1720,"width":619,"height":227},
		{"id":"fc21858466ddbbd0","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-attachment</h2>\n\n- Определяет, будет ли фоновое изображение прокручиваться вместе со страницей или будет фиксированным.\n- Принимает значения `scroll` (прокручивается вместе с элементом), `fixed` (фиксировано относительно окна просмотра) и `local` (прокручивается вместе с содержимым).","x":609,"y":1720,"width":619,"height":227},
		{"id":"336733dd508e431c","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-color</h2>\n\n- Определяет цвет фона элемента.\n- Может принимать значения в различных форматах: названия цветов (например, `red`), HEX-коды (например, `#ff0000`), RGB (например, `rgb(255, 0, 0)`), RGBA (например, `rgba(255, 0, 0, 0.5)`), HSL (например, `hsl(0, 100%, 50%)`), и HSLA (например, `hsla(0, 100%, 50%, 0.5)`).","x":-2691,"y":1720,"width":619,"height":227},
		{"id":"9cc2850d103b65cc","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-image</h2>\n\n- Устанавливает одно или несколько фоновых изображений.\n- Принимает значение `url`, указывающее на источник изображения, например, `url(\"image.jpg\")`.\n- Можно указать несколько изображений, разделяя их запятыми.","x":-2031,"y":1720,"width":619,"height":227},
		{"id":"fc5a60b83a8d292f","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-blend-mode</h2>\n\n  \nСвойство `background-blend-mode` в CSS используется для определения того, как слои фонового изображения и/или цвет фона должны смешиваться. Это свойство позволяет создавать разнообразные визуальные эффекты, объединяя изображения и цвета на фоне элемента посредством различных методов наложения.\n\nСвойство `background-blend-mode` применяется к элементу, имеющему фоновые изображения, цвета или их комбинацию. Можно указать один режим смешивания для всех фонов или задать разные режимы для каждого фонового изображения, перечисляя их через запятую.\n\n### Варианты значений `background-blend-mode`\n- **`normal`**: Стандартное наложение без смешивания.\n- **`multiply`**: Пиксели фонового изображения умножаются на соответствующие пиксели фона, что создает темнее эффект.\n- **`screen`**: Пиксели инвертируются, умножаются и снова инвертируются, создавая более светлый результат.\n- **`overlay`**: Сочетает режимы `multiply` и `screen`. Цвета смешиваются, сохраняя контрастность обеих слоев.\n- **`darken`**: Отображает более темные пиксели из изображений фона и элемента.\n- **`lighten`**: Отображает более светлые пиксели из изображений фона и элемента.\n- **`color-dodge`**: Осветляет базовый слой для отражения верхнего слоя, избегая чистого белого.\n- **`color-burn`**: Затемняет базовый слой для отражения верхнего слоя, избегая чистого черного.\n- **`hard-light`**: Похоже на `overlay`, но с более сильным контрастом.\n- **`soft-light`**: Похоже на `hard-light`, но более мягкое и менее контрастное.\n- **`difference`**: Вычитает темнее цвета из светлее цвета.\n- **`exclusion`**: Похоже на `difference`, но с меньшим контрастом.\n- **`hue`**: Применяет оттенок верхнего слоя к нижнему.\n- **`saturation`**: Применяет насыщенность верхнего слоя к нижнему.\n- **`color`**: Применяет оттенок и насыщенность верхнего слоя к яркости нижнего.\n- **`luminosity`**: Применяет яркость верхнего слоя к оттенку и насыщенности нижнего.\n","x":-2031,"y":2025,"width":619,"height":1020},
		{"id":"b7c52ade31108941","type":"text","text":"<h2 style=\"color: #FFC470; text-align: center\">background-clip</h2>\n\n  \nСвойство `background-clip` в CSS определяет, как фон (цвет или изображение) должен быть обрезан внутри элемента. Это свойство помогает контролировать область, до которой распространяется фон, что особенно полезно при создании сложных дизайнерских решений.\n\n### Основные значения `background-clip`\n1. **`border-box`**:\n    - Фон простирается под границу элемента, включая внутренний отступ (`padding`) и саму границу (`border`). Это стандартное поведение, если `background-clip` не указано явно.\n2. **`padding-box`**:\n    - Фон заканчивается на внутреннем краю границы элемента. Граница поверх фона, не включая саму границу в фоновую область. Это означает, что фон виден только внутри области, определяемой внутренним отступом.\n3. **`content-box`**:\n    - Фон применяется только к области содержимого элемента, не затрагивая внутренний отступ. Таким образом, фон начинается и заканчивается строго в пределах области, где находится содержимое элемента.\n4. **`text`** (экспериментальное значение, не поддерживается всеми браузерами):\n    - Фон отображается только в областях, где есть текст. Это позволяет создавать эффекты, например, текст с фоновым градиентом или изображением, видимым только в пределах букв текста.","x":-1368,"y":2025,"width":619,"height":719},
		{"id":"404868f716515d58","type":"file","file":"files/Pasted image 20240413144450.png","x":360,"y":-514,"width":679,"height":476},
		{"id":"2ad4fe51c106556c","type":"text","text":"```css\ndiv {\n  background-color: lightblue;\n  background-image: url(\"background.png\");\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: cover;\n  background-attachment: fixed;\n}\n```\nВ этом примере мы задаём блочному элементу (`div`) светло-голубой фон, на который накладываем фоновое изображение. Изображение не повторяется, центрируется по центру, растягивается так, чтобы покрыть весь доступный фон, и фиксируется при прокрутке страницы.","x":-327,"y":2038,"width":610,"height":345},
		{"id":"5f4840c29cb4551c","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">Background</h1>","x":-223,"y":1360,"width":400,"height":80},
		{"id":"4858672dea9ff930","type":"text","text":"Свойство clip-path в CSS используется для определения области элемента, которая будет отображаться, эффективно обрезая элемент по заданной форме. Это позволяет создавать сложные визуальные эффекты, такие как нестандартные формы и анимации, которые были бы сложны или невозможны с использованием традиционных методов CSS.","x":-374,"y":3320,"width":646,"height":138},
		{"id":"56a57f9db0277477","type":"text","text":"clip-path может принимать несколько типов значений:\n\nПрефиксные фигуры:\n\n`inset(x% y% width height)` - создает прямоугольную область внутри элемента, которую можно сдвигать относительно его краев.\n`circle(radius at x y)` - создает круглую область с указанным радиусом и центром в заданных координатах.\n`ellipse(rx ry at x y)` - создает эллиптическую область с двумя радиусами и центром в указанной позиции.\n`polygon(x1 y1, x2 y2, ...)` - создает многоугольник с вершинами в заданных координатах.","x":-386,"y":3500,"width":670,"height":309},
		{"id":"d770b48882ef25cf","type":"text","text":"Прямоугольник\n```css\ndiv {\n  clip-path: inset(10px 20px 30px 40px);\n}\n```\n\nКруг\n```css\ndiv {\n  clip-path: circle(50% at 50% 50%);\n}\n```\n\nЭллипс\n```css\ndiv {\n  clip-path: ellipse(50% 25% at 50% 50%);\n}\n```\n\nМногоугольник\n```css\ndiv {\n  clip-path: polygon(20% 20%, 80% 20%, 50% 80%);\n}\n```","x":320,"y":3195,"width":745,"height":610},
		{"id":"538d79b3b4c90192","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">Clip path</h1>","x":-251,"y":3200,"width":400,"height":80},
		{"id":"83aee3a923a29d6c","type":"text","text":"Свойство float в CSS используется для размещения элемента в левой или правой части его контейнера, позволяя тексту и другим элементам обтекать его с противоположной стороны. Float был первоначально введен для размещения изображений в тексте, как в печатных изданиях, но со временем начал использоваться для различных целей в веб-дизайне, включая создание макетов.\n\nВозможные значения:\nleft: Элемент перемещается к левому краю его контейнера, и текст обтекает его справа.\nright: Элемент перемещается к правому краю контейнера, и текст обтекает его слева.\nnone: Стандартное поведение, элемент не обтекается. Это значение по умолчанию.\ninherit: Элемент наследует значение float от своего родительского элемента.\n```css\nimg {\n\tfloat: left;\n\tmargin-left: 20px;\n}\n```\nВ этом примере изображение будет плавать слева, а текст, следующий за изображением в HTML, начнет обтекать его справа. Отступ справа добавлен, чтобы обеспечить пространство между текстом и изображением.","x":-1258,"y":3761,"width":580,"height":640},
		{"id":"8228f7e8b9a30ee1","type":"text","text":"<h2 style=\"text-align: center; color: #C5FF95\">Shape Outside</h2>\n\nСвойство `shape-outside` в CSS определяет форму вокруг которой должен обтекать контент. Это свойство позволяет создавать сложные макеты, в которых текст обтекает элементы нестандартной формы, не ограничиваясь прямоугольным блоком.\n#### Возможные значения:\n- **Фигуры**: `circle()`, `ellipse()`, `inset()`, `polygon()`.\n- **Изображения**: Можно использовать `url()` для задания внешнего изображения как формы.\n- **Градиенты**: использование градиентов для создания альфа-масок, где прозрачные области градиента будут областями, через которые текст может заполнять.\n- **`none`**: Нет внешней формы, текст не обтекает элемент.\n\n```css\n.shape {\n  float: left;\n  width: 200px;\n  height: 200px;\n  shape-outside: circle(50%);\n  clip-path: circle(50%);\n}\n```\nВ этом примере блок с классом `.shape` создает круглую область, вокруг которой текст должен обтекать. Этот эффект достигается за счет комбинации `shape-outside` и `clip-path`, где `clip-path` также обрезает элемент до круга, соответствующего форме, заданной в `shape-outside`.","x":-2020,"y":3741,"width":680,"height":681},
		{"id":"2781e09e22f0b795","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">Float</h1>","x":-1458,"y":3655,"width":400,"height":80},
		{"id":"b59943999f31c2a3","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">:not()</h1>","x":40,"y":4041,"width":400,"height":80},
		{"id":"00980f288bacc7da","type":"text","text":"Псевдо-класс :not() в CSS является функциональным псевдо-классом, который позволяет выбирать элементы, которые не соответствуют указанному селектору. Это очень полезно для исключения определённых элементов из общих стилей, упрощения CSS и уменьшения необходимости переопределять стили.\nСинтаксис `:not()` прост: `:not(selector)`, где `selector` — это любой допустимый CSS селектор. `:not()` может исключать элементы на основе тегов, классов, идентификаторов, атрибутов и даже более сложных селекторов.\n\n### Особенности использования\n1. **Одиночные и множественные условия**: В CSS3, `:not()` может содержать только один селектор внутри. Однако в CSS4 предложено расширение, которое позволяет использовать вложенные и множественные селекторы внутри `:not()`, хотя поддержка этого может отличаться в разных браузерах.\n2. **Сочетание с другими селекторами**: `:not()` может быть сочетан с другими селекторами для создания мощных условий выборки. Например, `div:not(.class)` выберет все `div`, которые не имеют класс `class`.\n3. **Не влияет на специфичность**: Специфичность селектора внутри `:not()` не влияет на специфичность самого `:not()`. Это означает, что `:not(.example)` имеет ту же специфичность, что и теговый селектор.\n\n```css\n/* Применить стили ко всем кнопкам, кроме тех, что имеют класс 'disabled' */\nbutton:not(.disabled) {\n  cursor: pointer;\n  opacity: 1;\n}\n\n```","x":-74,"y":4160,"width":628,"height":723}
	],
	"edges":[
		{"id":"aaa9355a6f63bd25","fromNode":"13a9483239034376","fromSide":"bottom","toNode":"da4b7223183848e8","toSide":"left"},
		{"id":"1334f74c4d01c083","fromNode":"a88786956de2e2d3","fromSide":"bottom","toNode":"da4b7223183848e8","toSide":"top"},
		{"id":"ac4cf5bc4a1249e6","fromNode":"520270b0621734e0","fromSide":"bottom","toNode":"da4b7223183848e8","toSide":"top"},
		{"id":"cb5f9613fc1ee33a","fromNode":"181efed551088e5e","fromSide":"bottom","toNode":"da4b7223183848e8","toSide":"right"},
		{"id":"cd7d6af634d0d62c","fromNode":"2bbf1c203e957c03","fromSide":"right","toNode":"bbb285ae443061f5","toSide":"left"},
		{"id":"0a090e9fac8717e4","fromNode":"83aee3a923a29d6c","fromSide":"left","toNode":"8228f7e8b9a30ee1","toSide":"right"}
	]
}