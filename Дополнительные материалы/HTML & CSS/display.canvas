{
	"nodes":[
		{"id":"32b7e54fc389cd21","type":"text","text":"<h1 style=\"color: #008DDA; text-align: center; text-transform: uppercase; font-size: 30px\">Свойство display</h1>","x":-220,"y":-520,"width":507,"height":90},
		{"id":"3c47e899f532309b","type":"text","text":"Свойство display в CSS3 является одним из основных свойств для управления отображением элементов на веб-странице. Это свойство определяет, как элемент должен быть показан в документе.","x":-182,"y":-400,"width":431,"height":137},
		{"id":"31d53c74fb857db0","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">Block</h2>\n\n **`block`** - Элемент отображается как блочный элемент, занимая всю доступную ширину контейнера и начинаясь с новой строки. Примеры блочных элементов включают `<div>`, `<p>` и `<section>`.","x":-1100,"y":-201,"width":535,"height":241},
		{"id":"304d63690e1a60f1","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">inline-block</h2>\n\n**`inline-block`** - Элемент отображается как строчный элемент, но при этом обладает свойствами блочного элемента, т.е. можно задавать ширину и высоту.","x":55,"y":-201,"width":535,"height":241},
		{"id":"f393114955a202ea","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">none</h2>\n\n**`none`** - Элемент полностью исключается из отображения (не видим на странице), и его пространство на странице также не отображается.","x":635,"y":-201,"width":535,"height":241},
		{"id":"8fcdb53aa60da6f5","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">inline</h2>\n\n**`inline`** - Элемент отображается в строке с другими элементами. Он не начинает новую строку и занимает только ту ширину, которая необходима для контента. Примеры строчных элементов: `<span>`, `<a>`.","x":-527,"y":-201,"width":535,"height":241},
		{"id":"53859d94dd9004f9","type":"file","file":"files/Pasted image 20240420181803.png","x":-1080,"y":289,"width":760,"height":1075},
		{"id":"1d582dd9a097b6ed","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">flexbox</h2>\n\nСвойство `flex` в CSS представляет собой мощный инструмент для создания сложных макетов с помощью гибкой системы контейнеров и элементов. Оно вводится через свойство `display` со значением `flex` и создаёт гибкий контейнер (flex container), который позволяет управлять расположением его дочерних элементов (flex items) более гибко, чем это возможно с блочными или строчными моделями.\n<h2 style=\"text-align: center; color: #ED9455\">Основные концепции Flexbox</h2>\n\n**Flex Container**: Чтобы использовать Flexbox, нужно задать элементу `display: flex;` или `display: inline-flex;`. При этом первый вариант делает элемент блочным контейнером, а второй — строчным.\n\n**Flex Items**: Непосредственные дочерние элементы контейнера автоматически становятся flex-элементами.\n<h2 style=\"text-align: center; color: #ED9455\">Основные концепции Flexbox</h2>\n\n1. **Flex Direction**: `flex-direction` определяет направление основной оси контейнера — горизонтально (`row`), вертикально (`column`), или в обратном порядке (`row-reverse`, `column-reverse`).\n    \n2. **Flex Wrap**: `flex-wrap` управляет переносом элементов на новую строку. По умолчанию элементы стараются поместиться в одну строку (`nowrap`), но можно задать перенос (`wrap`) или перенос в обратном порядке (`wrap-reverse`).\n    \n3. **Justify Content**: `justify-content` определяет выравнивание элементов вдоль основной оси (горизонтально для `row`, вертикально для `column`). Возможные значения: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`.\n    \n4. **Align Items**: `align-items` управляет выравниванием элементов вдоль поперечной оси (перпендикулярно основной оси). Возможные значения: `flex-start`, `flex-end`, `center`, `baseline`, `stretch`.\n    \n5. **Align Content**: `align-content` определяет распределение строк внутри контейнера, если есть дополнительное пространство по поперечной оси. Аналогично `justify-content`, но применяется к многоколоночным или многорядным раскладкам.\n<h2 style=\"text-align: center; color: #ED9455\">Свойства Flex Items</h2>\n\n- **Flex Grow**: `flex-grow` определяет способность элемента расти, если есть свободное пространство.\n- **Flex Shrink**: `flex-shrink` управляет способностью элемента сжиматься, если пространства недостаточно.\n- **Flex Basis**: `flex-basis` задаёт начальный размер элемента перед распределением свободного пространства.\n- **Flex**: `flex` — сокращённое свойство для `flex-grow`, `flex-shrink`, `flex-basis`.","x":-234,"y":180,"width":535,"height":1325},
		{"id":"2efa60831659c58f","type":"text","text":"<h2 style=\"text-align: center; color: #ED9455\">gap</h2>\n\nСвойство `gap` в контексте Flexbox в CSS предоставляет удобный способ задать расстояние между элементами внутри гибкого контейнера (`flex container`). Применение `gap` упрощает управление пространством между элементами, так как не требует добавления дополнительных стилей к каждому элементу индивидуально, как это бывает при использовании `margin`.\n<h2 style=\"text-align: center; color: #ED9455\">Описание свойства gap</h2>\n\nСвойство `gap` состоит из двух подсвойств: `row-gap` и `column-gap`, которые управляют расстоянием между строками и столбцами соответственно в гибком контейнере. В случае одномерного Flexbox-макета (например, с `flex-direction: row` или `column`), `gap` просто создаёт расстояние между элементами в основной оси:\n- `row-gap` устанавливает вертикальное расстояние между элементами (в строках).\n- `column-gap` устанавливает горизонтальное расстояние между элементами (в столбцах).\n\nКогда `flex-direction` задан как `row`, `gap` или `column-gap` контролирует горизонтальное расстояние между элементами. А при `flex-direction: column` — `row-gap` управляет вертикальным расстоянием.\n```css\n.container {\n  display: flex;\n  gap: 20px;  /* Одиночное значение применяется к обеим осям в одномерных макетах */\n}\n```\n<h2 style=\"text-align: center; color: #ED9455\">Различие gap и margin</h2>\n\n1. **Специфичность применения**:\n    \n    - **`gap`**: Применяется напрямую к контейнеру и автоматически добавляет пространство между всеми дочерними элементами, не влияя на внешние отступы контейнера относительно других элементов.\n    - **`margin`**: Должен быть применен к каждому элементу индивидуально. `margin` может использоваться для добавления пространства между элементами, а также для создания отступов от границ контейнера.\n2. **Влияние на внешний мир**:\n    \n    - **`gap`**: Не влияет на пространство вне flex контейнера, то есть не создаёт отступов от контейнера к другим элементам страницы.\n    - **`margin`**: Может использоваться для создания пространств как внутри, так и снаружи контейнера. Также может вызывать эффект \"margin collapsing\" (слияние внешних отступов), что не свойственно `gap`.\n3. **Легкость управления**:\n    \n    - **`gap`**: Позволяет легко управлять расстоянием между элементами без необходимости обращения к каждому элементу отдельно.\n    - **`margin`**: Требует более точного управления, особенно если отступы элементов должны отличаться.","x":-234,"y":1520,"width":535,"height":1413},
		{"id":"095ad4c47ad819dd","type":"text","text":"```css\n.container {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n\n.item {\n  flex: 1;  /* Равномерно разделять доступное пространство */\n  padding: 20px;\n  border: 1px solid #ccc;\n}\n```","x":380,"y":677,"width":600,"height":332}
	],
	"edges":[
		{"id":"d647804a75920712","fromNode":"1d582dd9a097b6ed","fromSide":"right","toNode":"095ad4c47ad819dd","toSide":"left"}
	]
}